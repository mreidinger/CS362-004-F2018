        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 87%
        1:   18:int main() {
        -:   19:
        -:   20:	//initilization variables from example
        -:   21:    int i, testResult;
        1:   22:    int seed = 1000;
        1:   23:    int numPlayer = 2;
        1:   24:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   25:               , remodel, smithy, village, baron, great_hall};
        -:   26:    struct gameState testGame;
        -:   27:
        -:   28:
        1:   29:	memset(&testGame, 23, sizeof(struct gameState));   // clear the game state
        1:   30:	initializeGame(numPlayer, k, seed, &testGame); // initialize a new game
call    0 returned 100%
        -:   31:
        1:   32:    printf ("TESTING shuffle():\n");
call    0 returned 100%
        -:   33:	
        -:   34:	//Test for shuffle on empty deck
        3:   35:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   36:	{	
        2:   37:		testGame.deckCount[i] = 0;
        2:   38:		testResult = shuffle(i, &testGame);
call    0 returned 100%
        2:   39:		if (testResult == -1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   40:		{
        2:   41:			printf("TEST Player %d empty deck PASSED:\n", i);
call    0 returned 100%
        -:   42:		}
        -:   43:		else
        -:   44:		{
    #####:   45:			printf("TEST Player %d empty deck Failed:\n", i);
call    0 never executed
        -:   46:		}
        -:   47:	}
        -:   48:	
        -:   49:
        -:   50:	//Test for proper return after shuffle
        3:   51:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   52:	{
        2:   53:		testGame.deckCount[i] = 8;
        -:   54:	}
        -:   55:	
        3:   56:	for (i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   57:	{
        2:   58:		if (shuffle(i, &testGame) == 0)
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        -:   59:		{
        2:   60:			printf("TEST Player %d full deck crash PASSED:\n", i);
call    0 returned 100%
        -:   61:		}
        -:   62:		else
        -:   63:		{
    #####:   64:			printf("TEST Player %d full deck crash Failed:\n", i);
call    0 never executed
        -:   65:		}
        -:   66:	}
        -:   67:	  
        -:   68:	int deck1Start, deck2Start, deck1End, deck2End;
        1:   69:	deck1Start = testGame.deck[0][0];
        1:   70:	deck2Start = testGame.deck[1][0];
        1:   71:	deck1End = testGame.deck[0][7];
        1:   72:	deck2End = testGame.deck[1][7];
        1:   73:	shuffle(0, &testGame);
call    0 returned 100%
        -:   74:
        -:   75:	//Test proper shuffle behavior on player 1
        1:   76:		if (deck1Start == testGame.deck[0][0] && deck1End == testGame.deck[0][7])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   77:		{
    #####:   78:			printf("TEST Player 0 Shuffle full FAILED:\n");
call    0 never executed
        -:   79:		}
        -:   80:		else
        -:   81:		{
        1:   82:			printf("TEST Player 0 Shuffle full PASSED:\n");
call    0 returned 100%
        -:   83:		}
        -:   84:
        -:   85:	//Test if shuffle selected the proper player
        1:   86:	if (deck2Start == testGame.deck[1][0] && deck2End == testGame.deck[1][7])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        -:   87:	{
        1:   88:		printf("TEST Player 1 Accidental Shuffle PASSED:\n");
call    0 returned 100%
        -:   89:	}
        -:   90:	else
        -:   91:	{
    #####:   92:		printf("TEST Player 1 Accidental Shuffle PASSED:\n");
call    0 never executed
        -:   93:	}
        -:   94:	
        1:   95:    return 0;
        -:   96:}
