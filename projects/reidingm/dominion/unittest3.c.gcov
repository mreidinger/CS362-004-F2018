        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 92%
        1:   18:int main() {
        -:   19: 
        -:   20:	//initilization variables from example
        -:   21:	int i, testResult, p0ExTotal;
        1:   22:	int seed = 1000;
        1:   23:	int numPlayer = 2;
        1:   24:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   25:		, remodel, smithy, village, baron, great_hall };
        -:   26:	struct gameState testGame;
        -:   27:
        1:   28:	memset(&testGame, 23, sizeof(struct gameState));   // clear the game state
        1:   29:	initializeGame(numPlayer, k, seed, &testGame); // initialize a new game
call    0 returned 100%
        -:   30:
        1:   31:	testGame.deckCount[0] = 6;
        1:   32:	testGame.deckCount[1] = 6;
        1:   33:	testGame.handCount[0] = 5;
        1:   34:	testGame.handCount[1] = 5;
        1:   35:	testGame.discardCount[0] = 5;
        1:   36:	testGame.discardCount[1] = 5;
        -:   37:
        1:   38:	p0ExTotal = testGame.deckCount[0] + testGame.handCount[0] + testGame.discardCount[0];
        -:   39:
        7:   40:	for (i = 0; i < testGame.deckCount[0]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   41:	{
        6:   42:		testGame.deck[0][i] = copper;
        -:   43:	}
        -:   44:
        7:   45:	for (i = 0; i < testGame.deckCount[1]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:   46:	{
        6:   47:		testGame.deck[1][i] = silver;
        -:   48:	}
        -:   49:
        6:   50:	for (i = 0; i < testGame.handCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   51:	{
        5:   52:		testGame.hand[0][i] = copper;
        -:   53:	}
        -:   54:
        6:   55:	for (i = 0; i < testGame.handCount[1]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   56:	{
        5:   57:		testGame.hand[1][i] = silver;
        -:   58:	}
        -:   59:
        6:   60:	for (i = 0; i < testGame.discardCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   61:	{
        5:   62:		testGame.discard[0][i] = copper;
        -:   63:	}
        -:   64:
        6:   65:	for (i = 0; i < testGame.discardCount[1]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   66:	{
        5:   67:		testGame.discard[1][i] = silver;
        -:   68:	}
        -:   69:
        1:   70:	printf("TESTING fullDeckCount():\n");
call    0 returned 100%
        -:   71:
        1:   72:	testResult = fullDeckCount(0, copper, &testGame);
call    0 returned 100%
        -:   73:
        1:   74:	if (testResult == p0ExTotal)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:	{
        1:   76:		printf("TEST Player 0 Full Pile Count PASSED :\n");
call    0 returned 100%
        -:   77:	}
        -:   78:
        -:   79:	else
        -:   80:	{
    #####:   81:		printf("TEST Player 0 Full Pile Count FAILED:\n");
call    0 never executed
        -:   82:	}
        -:   83:
        1:   84:	testResult = fullDeckCount(0, silver, &testGame);
call    0 returned 100%
        -:   85:	
        1:   86:	if (testResult == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   87:	{
        1:   88:		printf("TEST Player 1 Empty Pile Count PASSED :\n");
call    0 returned 100%
        -:   89:	}
        -:   90:
        -:   91:	else
        -:   92:	{
    #####:   93:		printf("TEST Player 1 Empty Pile Count FAILED:\n");
call    0 never executed
        -:   94:	}
        -:   95:
        6:   96:	for (i = 0; i < testGame.handCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   97:	{
        5:   98:		testGame.hand[0][i] = silver;
        -:   99:	}
        -:  100:
        6:  101:	for (i = 0; i < testGame.discardCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  102:	{
        5:  103:		testGame.discard[0][i] = silver;
        -:  104:	}
        -:  105:
        1:  106:	testResult = fullDeckCount(0, copper, &testGame);
call    0 returned 100%
        -:  107:
        1:  108:	if (testResult == testGame.deckCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  109:	{
        1:  110:		printf("TEST Player 0 Deck Only Count PASSED :\n");
call    0 returned 100%
        -:  111:	}
        -:  112:
        -:  113:	else
        -:  114:	{
    #####:  115:		printf("TEST Player 0 Deck Only Count FAILED:\n");
call    0 never executed
        -:  116:	}
        -:  117:
        6:  118:	for (i = 0; i < testGame.handCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  119:	{
        5:  120:		testGame.hand[0][i] = copper;
        -:  121:	}
        -:  122:
        7:  123:	for (i = 0; i < testGame.deckCount[0]; i++)
branch  0 taken 86%
branch  1 taken 14% (fallthrough)
        -:  124:	{
        6:  125:		testGame.deck[0][i] = silver;
        -:  126:	}
        -:  127:
        1:  128:	testResult = fullDeckCount(0, copper, &testGame);
call    0 returned 100%
        -:  129:
        1:  130:	if (testResult == testGame.handCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  131:	{
        1:  132:		printf("TEST Player 0 Hand Only Count PASSED :\n");
call    0 returned 100%
        -:  133:	}
        -:  134:
        -:  135:	else
        -:  136:	{
    #####:  137:		printf("TEST Player 0 Hand Only Count FAILED:\n");
call    0 never executed
        -:  138:	}
        -:  139:
        6:  140:	for (i = 0; i < testGame.handCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  141:	{
        5:  142:		testGame.hand[0][i] = silver;
        -:  143:	}
        -:  144:
        6:  145:	for (i = 0; i < testGame.discardCount[0]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:  146:	{
        5:  147:		testGame.discard[0][i] = copper;
        -:  148:	}
        -:  149:
        1:  150:	testResult = fullDeckCount(0, copper, &testGame);
call    0 returned 100%
        -:  151:
        1:  152:	if (testResult == testGame.discardCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  153:	{
        1:  154:		printf("TEST Player 0 Discard Only Count PASSED :\n");
call    0 returned 100%
        -:  155:	}
        -:  156:
        -:  157:	else
        -:  158:	{
    #####:  159:		printf("TEST Player 0 Discard Only Count FAILED:\n");
call    0 never executed
        -:  160:	}
        -:  161:
        1:  162:    return 0;
        -:  163:}
