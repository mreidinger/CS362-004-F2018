        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * Demonstration of how to write unit tests for dominion-base
        -:    3: * Include the following lines in your makefile:
        -:    4: *
        -:    5: * testUpdateCoins: testUpdateCoins.c dominion.o rngs.o
        -:    6: *      gcc -o testUpdateCoins -g  testUpdateCoins.c dominion.o rngs.o $(CFLAGS)
        -:    7: * -----------------------------------------------------------------------
        -:    8: */
        -:    9:
        -:   10:#include "dominion.h"
        -:   11:#include "dominion_helpers.h"
        -:   12:#include <string.h>
        -:   13:#include <stdio.h>
        -:   14:#include <assert.h>
        -:   15:#include "rngs.h"
        -:   16:
        -:   17:
function main called 1 returned 100% blocks executed 79%
        1:   18:int main() {
        -:   19:
        -:   20:	//initilization variables from example
        -:   21:	int i, testResult, tempProvince;
        1:   22:	int seed = 1000;
        1:   23:	int numPlayer = 2;
        1:   24:	int k[10] = { adventurer, council_room, feast, gardens, mine
        -:   25:		, remodel, smithy, village, baron, great_hall };
        -:   26:	struct gameState testGame;
        -:   27:
        1:   28:	memset(&testGame, 23, sizeof(struct gameState));   // clear the game state
        1:   29:	initializeGame(numPlayer, k, seed, &testGame); // initialize a new game
call    0 returned 100%
        -:   30:
        1:   31:	printf("TESTING isGameOver():\n");
call    0 returned 100%
        1:   32:	testResult = isGameOver(&testGame);
call    0 returned 100%
        -:   33:	
        1:   34:	if (testResult == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   35:	{
        1:   36:		printf("TEST New Game PASSED:\n");
call    0 returned 100%
        -:   37:	}
        -:   38:	else
        -:   39:	{
    #####:   40:		printf("TEST New Game FAILED:\n");
call    0 never executed
        -:   41:	}
        -:   42:
        1:   43:	tempProvince = testGame.supplyCount[province];
        -:   44:
        1:   45:	testGame.supplyCount[province] = 0;
        1:   46:	testResult = isGameOver(&testGame);
call    0 returned 100%
        -:   47:
        1:   48:	if (testResult == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   49:	{
        1:   50:		printf("TEST Province Depleated PASSED:\n");
call    0 returned 100%
        -:   51:	}
        -:   52:	else
        -:   53:	{
    #####:   54:		printf("TEST Province Depleated FAILED:\n");
call    0 never executed
        -:   55:	}
        -:   56:
        1:   57:	testGame.supplyCount[province] = tempProvince;
        -:   58:
        1:   59:	testGame.supplyCount[copper] = 0;
        1:   60:	testResult = isGameOver(&testGame);
call    0 returned 100%
        -:   61:
        1:   62:	if (testResult == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   63:	{
        1:   64:		printf("TEST One Depleated Pile PASSED:\n");
call    0 returned 100%
        -:   65:	}
        -:   66:	else
        -:   67:	{
    #####:   68:		printf("TEST One Depleated Pile FAILED:\n");
call    0 never executed
        -:   69:	}
        -:   70:
        1:   71:	testGame.supplyCount[silver] = 0;
        1:   72:	testResult = isGameOver(&testGame);
call    0 returned 100%
        -:   73:
        1:   74:	if (testResult == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   75:	{
        1:   76:		printf("TEST Two Depleated Piles PASSED:\n");
call    0 returned 100%
        -:   77:	}
        -:   78:	else
        -:   79:	{
    #####:   80:		printf("TEST Two Depleated Piles FAILED:\n");
call    0 never executed
        -:   81:	}
        -:   82:
        1:   83:	testGame.supplyCount[gold] = 0;
        1:   84:	testResult = isGameOver(&testGame);
call    0 returned 100%
        -:   85:
        1:   86:	if (testResult == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   87:	{
        1:   88:		printf("TEST Three Depleated Piles PASSED:\n");
call    0 returned 100%
        -:   89:	}
        -:   90:	else
        -:   91:	{
    #####:   92:		printf("TEST Three Depleated Piles FAILED:\n");
call    0 never executed
        -:   93:	}
        -:   94:
        1:   95:    return 0;
        -:   96:}
