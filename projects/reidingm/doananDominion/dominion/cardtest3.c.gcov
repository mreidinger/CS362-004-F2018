        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * cardtest4.c
        -:    3: *
        -:    4: 
        -:    5: */
        -:    6:
        -:    7:/*
        -:    8: * Include the following lines in your makefile:
        -:    9: *
        -:   10: * cardtest4: cardtest4.c dominion.o rngs.o
        -:   11: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:   12: */
        -:   13:
        -:   14:
        -:   15:#include "dominion.h"
        -:   16:#include "dominion_helpers.h"
        -:   17:#include <string.h>
        -:   18:#include <stdio.h>
        -:   19:#include <assert.h>
        -:   20:#include "rngs.h"
        -:   21:#include <stdlib.h>
        -:   22:
        -:   23:
function main called 1 returned 100% blocks executed 73%
        1:   24:int main() {
        -:   25:	//initilization variables from example
        -:   26:	int i, testResult, startCard, endCard;
        1:   27:	int seed = 1000;
        1:   28:	int numPlayer = 2;
        1:   29:	int handPos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0, kingdomChange = 0;
        -:   30:	struct gameState testGame, testGameStart;
        1:   31:	int k[10] = { adventurer, embargo, village, minion, mine, cutpurse,
        -:   32:		sea_hag, tribute, smithy, council_room };
        -:   33:
        -:   34:	// initialize a game state and player cards
        1:   35:	memset(&testGame, 23, sizeof(struct gameState));   // clear the game state
        1:   36:	memset(&testGameStart, 23, sizeof(struct gameState));   // clear the game state
        1:   37:	initializeGame(numPlayer, k, seed, &testGame);
call    0 returned 100%
        1:   38:	memcpy(&testGameStart, &testGame, sizeof(struct gameState)); //backup state for comparison
        -:   39:
        1:   40:	cardEffect(great_hall, choice1, choice2, choice3, &testGame, handPos, &bonus);
call    0 returned 100%
        -:   41:
        1:   42:	printf("TESTING great_hall:\n");
call    0 returned 100%
        -:   43:
        -:   44:	// Test that one card was drawn
        1:   45:	if (testGameStart.handCount[0] == testGame.handCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   46:	{
        1:   47:		printf("TEST Player 0 Draw One Cards PASSED:\n");
call    0 returned 100%
        -:   48:	}
        -:   49:	else
        -:   50:	{
    #####:   51:		printf("TEST Player 0 Draw One Cards FAILED:\n");
call    0 never executed
        -:   52:	}
        -:   53:
        -:   54:	// Test that one action was added
        1:   55:	if (testGameStart.numActions + 1 == testGame.numActions)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   56:	{
        1:   57:		printf("TEST Player 0 +1 Action PASSED:\n");
call    0 returned 100%
        -:   58:	}
        -:   59:	else
        -:   60:	{
    #####:   61:		printf("TEST Player 0 +1 Action FAILED:\n");
call    0 never executed
        -:   62:	}
        -:   63:
        -:   64:	// Test that card was discarded
        1:   65:	if (testGameStart.playedCardCount + 1 == testGame.playedCardCount)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   66:	{
        1:   67:		printf("TEST Player 0 great_hall Played PASSED:\n");
call    0 returned 100%
        -:   68:	}
        -:   69:	else
        -:   70:	{
    #####:   71:		printf("TEST Player 0 great_hall Played FAILED:\n");
call    0 never executed
        -:   72:	}
        -:   73:
        -:   74:	//Check Player 1 for change
        1:   75:	if (testGameStart.handCount[1] == testGame.handCount[1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   76:	{
        1:   77:		printf("TEST Player 1 Hand PASSED:\n");
call    0 returned 100%
        -:   78:	}
        -:   79:	else
        -:   80:	{
    #####:   81:		printf("TEST Player 1 Hand FAILED:\n");
call    0 never executed
        -:   82:	}
        -:   83:
        1:   84:	if (testGameStart.deckCount[1] == testGame.deckCount[1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   85:	{
        1:   86:		printf("TEST Player 1 Deck PASSED:\n");
call    0 returned 100%
        -:   87:	}
        -:   88:	else
        -:   89:	{
    #####:   90:		printf("TEST Player 1 Deck FAILED:\n");
call    0 never executed
        -:   91:	}
        -:   92:
        1:   93:	if (testGameStart.discardCount[1] == testGame.discardCount[1])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   94:	{
        1:   95:		printf("TEST Player 1 Discard PASSED:\n");
call    0 returned 100%
        -:   96:	}
        -:   97:	else
        -:   98:	{
    #####:   99:		printf("TEST Player 1 Discard FAILED:\n");
call    0 never executed
        -:  100:	}
        -:  101:
        -:  102:	// Check Victory and Kingdom Piles
        1:  103:	if (testGameStart.supplyCount[estate] == testGame.supplyCount[estate])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  104:	{
        1:  105:		printf("TEST Estate Unchanged PASSED:\n");
call    0 returned 100%
        -:  106:	}
        -:  107:	else
        -:  108:	{
    #####:  109:		printf("TEST Estate Unchanged FAILED:\n");
call    0 never executed
        -:  110:	}
        -:  111:
        1:  112:	if (testGameStart.supplyCount[duchy] == testGame.supplyCount[duchy])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  113:	{
        1:  114:		printf("TEST Duchy Unchanged PASSED:\n");
call    0 returned 100%
        -:  115:	}
        -:  116:	else
        -:  117:	{
    #####:  118:		printf("TEST Duchy Unchanged FAILED:\n");
call    0 never executed
        -:  119:	}
        -:  120:
        1:  121:	if (testGameStart.supplyCount[province] == testGame.supplyCount[province])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  122:	{
        1:  123:		printf("TEST Province Unchanged PASSED:\n");
call    0 returned 100%
        -:  124:	}
        -:  125:	else
        -:  126:	{
    #####:  127:		printf("TEST Province Unchanged FAILED:\n");
call    0 never executed
        -:  128:	}
        -:  129:
       11:  130:	for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:  131:	{
       10:  132:		if (testGameStart.supplyCount[k[i]] != testGame.supplyCount[k[i]])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  133:		{
    #####:  134:			kingdomChange++;
        -:  135:		}
        -:  136:	}
        -:  137:
        1:  138:	if (kingdomChange == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  139:	{
        1:  140:		printf("TEST Kingdom Unchanged PASSED:\n");
call    0 returned 100%
        -:  141:	}
        -:  142:	else
        -:  143:	{
    #####:  144:		printf("TEST Kingdom Unchanged FAILED:\n");
call    0 never executed
        -:  145:	}
        -:  146:
        1:  147:	return 0;
        -:  148:}
        -:  149:
        -:  150:
